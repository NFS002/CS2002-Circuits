.TH "circuits.c" 3 "Tue Apr 10 2018" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
circuits.c \- this source file contains all function declerations necessary for building and running the program  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <ctype\&.h>\fP
.br
\fC#include <stdbool\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include <limits\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include 'circuits\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBprocessLine\fP (char *str, unsigned int line_num)"
.br
.ti -1c
.RI "void \fBsimulateCircuit\fP (unsigned int i, bool reset, bool synchronous)"
.br
.ti -1c
.RI "void \fBinitializeCircuitInputs\fP (unsigned int i, bool reset, bool synchronous)"
.br
.ti -1c
.RI "void \fBdecimalToBinaryArray\fP (int decimal, int bin[], int numBits)"
.br
.ti -1c
.RI "void \fBprintTimeseries\fP (bool synchronous)"
.br
.ti -1c
.RI "void \fBprintCircuitInputs\fP (void)"
.br
.ti -1c
.RI "unsigned int \fBcountInputs\fP (void)"
.br
.ti -1c
.RI "void \fBprintTruthTable\fP (bool reset)"
.br
.ti -1c
.RI "\fBCircuitNode\fP * \fBmakeNode\fP (char *id, char *func)"
.br
.ti -1c
.RI "void \fBfreeCircuit\fP (void)"
.br
.ti -1c
.RI "unsigned int \fBsplitString\fP (char str[], char *dl, char **res)"
.br
.ti -1c
.RI "void \fBtrimString\fP (char *s)"
.br
.ti -1c
.RI "int \fBis_empty\fP (const char *s)"
.br
.ti -1c
.RI "\fBCircuitNode\fP * \fBfindNodebyId\fP (char *id)"
.br
.ti -1c
.RI "void \fBinitCircuit\fP (void)"
.br
.ti -1c
.RI "void \fBappend\fP (\fBCircuitNode\fP *new_node)"
.br
.ti -1c
.RI "void \fBprintCircuit\fP (void)"
.br
.ti -1c
.RI "void \fBprintNode\fP (\fBCircuitNode\fP *node)"
.br
.ti -1c
.RI "void \fBincrementCircuit\fP (bool synchronous)"
.br
.ti -1c
.RI "unsigned int \fBgetGateOutput\fP (\fBCircuitNode\fP *gate, bool synchronous)"
.br
.ti -1c
.RI "void \fBsetCircuitRunTime\fP (void)"
.br
.ti -1c
.RI "bool \fBisCircuitComplete\fP (void)"
.br
.ti -1c
.RI "int \fBmain\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
this source file contains all function declerations necessary for building and running the program 


.PP
\fBAuthor:\fP
.RS 4
120011222
.RE
.PP
\fBDate:\fP
.RS 4
10/04/2018 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void append (\fBCircuitNode\fP * new_node)"
Function definition: append\&. Insert a new node into the circuit at the next availble position 
.PP
\fBParameters:\fP
.RS 4
\fInew_node\fP the new \fBCircuitNode\fP to append to the circuit\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBCircuitNode\fP 
.RE
.PP
\fIDBUG\fP/printf('Appending new node to circuit:  %s\\n',new_node->id); 
.SS "unsigned int countInputs (void)"
Function definition: countInputs\&. Counts the number of input wires in the circuit 
.PP
\fBReturns:\fP
.RS 4
the number, as an unsigned integer 
.RE
.PP

.SS "void decimalToBinaryArray (int decimal, int bin[], int numBits)"
r Function definition: decimalToBinaryArray\&. Convert a decinal number to binary number, stored with each digit in consecutive elements of an array\&. Uses a bitwise AND on repeated right bitshifts of the decimal number to isolate the particular bit in the decimal number we 
.PP
\fBParameters:\fP
.RS 4
\fIdecimal\fP the decimal number 
.br
\fIbin\fP the array 
.br
\fInumBits\fP the length of the array 
.RE
.PP

.SS "\fBCircuitNode\fP* findNodebyId (char * id)"
Function defintion: findNodebyId\&. Searches the circuit for a \fBCircuitNode\fP with a particular id and returns a pointer to that node\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP the id to search for 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to that node, or NULL if the pointer cannot be found\&. 
.RE
.PP
\fIDBG\fP/printf('findNodebyId: %s\\n',id); 
.SS "void freeCircuit (void)"

.SS "unsigned int getGateOutput (\fBCircuitNode\fP * gate, bool synchronous)"
Function defintion: getGateOutput\&. Calculate the output of a particular gate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIgate\fP the gate to calculate the output for\&. 
.br
\fIsynchronous\fP whether to calculate the output synchrnously or asynchronously\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsimulateCircuit\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the output of the gate\&. 
.RE
.PP

.SS "void incrementCircuit (bool synchronous)"
Function defintion: incrementCircuit\&. Calculate the state for each wire in the circuit\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsynchronous\fP whether to calculate the state in each wire based on the value of the state at the previous time in each wire\&. 
.RE
.PP
\fIDBUG\fP/printf('\\nIncrementing internal state of circuit\\n'); 
.SS "void initCircuit (void)"
Function defintion: initCircuit\&. Initialize all ciruit elements to null 
.SS "void initializeCircuitInputs (unsigned int i, bool reset, bool synchronous)"

.IP "\(bu" 2
DBUG */ printf('found input'); 
.PP

.SS "int is_empty (const char * s)"
Function defintion: is_empty\&. Test whether a string is 'empty' i\&.e consists only of whitespace\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP the string 
.RE
.PP

.SS "bool isCircuitComplete (void)"
Function definition: isCircuitComplete\&. Test if the circuit is 'fully formed' i\&.e each node has an appropiate number of outputs/inputs connected, based on the function of that node\&. 
.PP
\fBReturns:\fP
.RS 4
whether the circuit is 'fully formed' or not\&. 
.RE
.PP

.SS "int main ()"
The main method\&. The entry point to the program\&. 
.PP
\fBReturns:\fP
.RS 4
the exit status of the program\&. 
.RE
.PP

.SS "\fBCircuitNode\fP* makeNode (char * id, char * func)"
Function definition: makeNode\&. Dynamically allocates memory for a new node in the circuit, and fills that memory with a \fBCircuitNode\fP struct, with the id (name) and the function of the struct set to the values given in arguments to the function\&. All other values are set to 0/NULL\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP the id member (name) of the new circuitnoe struct 
.br
\fIfunc\fP the func member of the new circuitnoe struct 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBCircuitNode\fP for a description of the struct, and a list of possible functions\&. 
.RE
.PP

.SS "void printCircuit (void)"
Function defintion: printCircuit\&. Prints a textual representation of the circuit\&. 
.SS "void printCircuitInputs (void)"
Function definition: printCircuitInputs Prints the name of each input wire in the circuit 
.SS "void printNode (\fBCircuitNode\fP * node)"
Function defintion: printNode\&. Prints a textual representation of a node in the citrcuit\&. 
.PP
\fBParameters:\fP
.RS 4
\fInode\fP the node to print\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBCircuitNode\fP 
.RE
.PP

.SS "void printTimeseries (bool synchronous)"
Function definition: printTimeseries\&. Prints a timeseries for the circuit, showing the state in each wire over time, until the maximum circuit time is reached\&. 
.SS "void printTruthTable (bool reset)"
\fIDBG\fP/printf('%d == %d == %d ', states[circuit_run_time - 1], states[circuit_run_time - 2], states[circuit_run_time - 3]); 
.SS "void processLine (char * str, unsigned int line_num)"
Function definition: processLine\&. Reads a line of CDL text and processes it into the data structure representing the circuit described by the text\&. Each word in the line of text represents a gate or a wire, and there are a maximum of 4 words in the line, with the second word being the gate, and the other words being wires\&. We can infer from the position of the word, aswell as the word itself, some of the properties of the gate/wire that the word represents\&.
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP The line of CDL text 
.br
\fIline_num\fP an integer specifying which line of CDL text is being passed, this paramater is only used to form an identifier for the gate (word 2) given by that line\&. 
.RE
.PP
\fIDBG\fP/printf('processLine (%d) :  %s\\n',line_num,str); 
.SS "void setCircuitRunTime (void)"
Function defintion: setCircuitRunTime\&. Calculates the maximum runtime for the circuit, to determine up to which point to simulate the circuit when writing a timeseries or truthtable\&. 
.SS "void simulateCircuit (unsigned int i, bool reset, bool synchronous)"

.SS "unsigned int splitString (char str[], char * dl, char ** res)"
Function defintion: splitString\&. Split a longer string into an array inidiviual words\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP the string 
.br
\fIdl\fP the delimitter to use 
.br
\fIres\fP where to store the result\&. 
.RE
.PP

.SS "void trimString (char * s)"
Function defintionL trimString\&. Remove leading and trailing whitespace from a string\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP the string\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
